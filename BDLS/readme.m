warning off %#ok<WNOFF>
clear all
clc

addpath(genpath('.'));
starttime = datestr(now,0);


load 'data/Arts.mat';

train_target(train_target==-1)=0;
test_target(test_target==-1)=0;

%% Optimization Parameters
model_MLL.type=1;               %%add SVM
optmParameter.alpha   = 2^-3; % 2.^[-10:10] % label correlation
optmParameter.beta    = 2^-3; % 2.^[-10:10] % sparsity
optmParameter.lambda  = 2^-4; % 2.^[-10:10] % YLoss
optmParameter.gamma   = 0.01; %{0.1, 1, 10} % initialization for W

optmParameter.searchPara = 0; 
optmParameter.tuneParaOneTime = 1; 

% for large scale dataset, search ranges for alpha and beta should be set to large values,
% e.g., 2.^[-10:10];
optmParameter.alpha_searchrange = 2.^[-6:3]; 
optmParameter.beta_searchrange  = 2.^[-6:3];
optmParameter.gamma_searchrange = 10.^[-2:-1];
optmParameter.lambda_searchrange = 2.^[-6:3];
    
optmParameter.maxIter           = 100;
optmParameter.minimumLossMargin = 0.0001;
optmParameter.bQuiet             = 1;

%% Model Parameters
modelparameter.crossvalidation    = 1; % {0,1}
modelparameter.cv_num             = 5;
modelparameter.L2Norm             = 1; % {0,1}
modelparameter.drawNumofFeatures  = 0; % {0,1}
modelparameter.deleteData         = 1; % {0,1}

%% Train and Test
if modelparameter.crossvalidation==0 
else
%% cross validation
    if exist('train_data','var')==1
        data=[train_data;test_data];
        target=[train_target,test_target];
        clear train_data test_data train_target test_target
    end
    data     = double(data);
    num_data = size(data,1);
    if modelparameter.L2Norm == 1
        temp_data = data;
        temp_data = temp_data./repmat(sqrt(sum(temp_data.^2,2)),1,size(temp_data,2));
        if sum(sum(isnan(temp_data)))>0
            temp_data = data+eps;
            temp_data = temp_data./repmat(sqrt(sum(temp_data.^2,2)),1,size(temp_data,2));
        end
    else
        temp_data = data;
    end
    if modelparameter.deleteData
        clear data
    end
    
    randorder = randperm(num_data);
    Result_BDLS  = zeros(16,modelparameter.cv_num);

    for j = 1:modelparameter.cv_num
        fprintf('Running Fold - %d/%d \n',j,modelparameter.cv_num);

       %% the training and test parts are generated by fixed spliting with the given random order
        [cv_train_data,cv_train_target,cv_test_data,cv_test_target ] = generateCVSet( temp_data,target',randorder,j,modelparameter.cv_num );
        cv_train_target=cv_train_target';
        cv_test_target=cv_test_target';

       %% Tune the parametes
        if optmParameter.searchPara == 1
            if (optmParameter.tuneParaOneTime == 1) && (exist('BestResult','var')==0)
                fprintf('\n-  parameterization for BDLS by cross validation on the training data');
                [optmParameter, BestResult ] = BDLS_adaptive_validate1( cv_train_data, cv_train_target, optmParameter);
            elseif (optmParameter.tuneParaOneTime == 0)
                fprintf('\n-  parameterization for BDLS by cross validation on the training data');
                [optmParameter, BestResult ] = BDLS_adaptive_validate( cv_train_data, cv_train_target, optmParameter);
            end
        end
        
       %% If we don't search the parameters, we will run BDLS with the fixed parametrs
        [model_BDLS,loss]  = BDLS(cv_train_data, cv_train_target',optmParameter);
        [Pre_Labels,Outputs]=LabelSpecificFeature(cv_test_data,cv_test_target,cv_train_data,cv_train_target,model_BDLS,model_MLL);
        

       %% In our experiment, we set the threshold to be 0.5, and an appropriate threshold can be searched on the training data, and
       %% a better performance would be achieved.
% %         Pre_Labels  = round(Outputs');
% %         Pre_Labels  = (Pre_Labels >= 1);
% %         Pre_Labels  = double(Pre_Labels);
        
       %% evaluation of BDLS
        Result_BDLS(:,j) = EvaluationAll(Pre_Labels,Outputs',cv_test_target);

       %% count the number of label specific features for each label
        if modelparameter.drawNumofFeatures
            [a,b]=size(cv_test_data);
            [c,a]=size(cv_test_target);
            numofFeatures = sum(model_BDLS~=0);
            d= numofFeatures/b;
            f=sum(numofFeatures)/b/c;
            figure;
            bar(d,'b');%
            axis([0 c+1 0 1]);
            set(gca,'fontsize',16)
            xlabel('Label Category')
            ylabel('Ratio');
            f=sum(numofFeatures)/b/c;
        end
    end

   %% the average results of BDLS
    Avg_Result = zeros(16,2);
    Avg_Result(:,1)=mean(Result_BDLS,2);
    Avg_Result(:,2)=std(Result_BDLS,1,2);
    fprintf('\nResults of BDLS\n');
    PrintResults(Avg_Result);

end
% endtime = datestr(now,0);
% plot(loss,'-r');
% xlabel('Iteration');
% ylabel('Objective Function Value');
% title('Social')
% grid on
% hold on




